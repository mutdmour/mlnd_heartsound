# function states = labelPCGStates(envelope,s1_positions, s2_positions, samplingFrequency, figures)
#
# This function assigns the state labels to a PCG record. 
# This is based on ECG markers, dervied from the R peak and end-T wave locations.
#
## Inputs:
# envelope: The PCG recording envelope (found in getSpringerPCGFeatures.m)
# s1_positions: The locations of the R peaks (in samples)
# s2_positions: The locations of the end-T waves (in samples)
# samplingFrequency: The sampling frequency of the PCG recording
# figures (optional): boolean variable dictating the display of figures
#
## Output:
# states: An array of the state label for each sample in the feature
# vector. The total number of states is 4. Therefore, this is an array of
# values between 1 and 4, such as: [1,1,1,1,2,2,2,3,3,3,3,4,4,4,4,4,1,1,1],
# illustrating the "true" state label for each sample in the features.
# State 1 = S1 sound
# State 2 = systole
# State 3 = S2 sound
# State 4 = diastole

import numpy as np
def labelPCGStates(envelope,s1_positions, s2_positions, samplingFrequency, figures=False):

    states = np.zeros(len(envelope))

    ## Timing durations from Schmidt:
    mean_S1 = 0.122*samplingFrequency
    std_S1 = 0.022*samplingFrequency
    mean_S2 = 0.092*samplingFrequency
    std_S2 = 0.022*samplingFrequency

    # Setting the duration from each R-peak to (R-peak+mean_S1) as the first state:
    # The R-peak in the ECG coincides with the start of the S1 sound (A. G.
    # Tilkian and M. B. Conover, Understanding heart sounds and murmurs: with
    # an introduction to lung sounds, 4th ed. Saunders, 2001.)
    # Therefore, the duration from each R-peak to the mean_S1 sound duration
    # later were labelled as the "true" positions of the S1 sounds:
    upperbounds = []
    for i in range(0,len(s1_positions)):
        #Set an upper bound, incase the window extends over the length of the
        #signal:
        upper_bound = round(min(len(states), s1_positions[i] + mean_S1))
        
        #Set the states between the start of the R peak and the upper bound as
        #state 1:
        start = max([0,s1_positions[i]])
        end = min([upper_bound,len(states)]) + 1
        # upperbounds.append(end)

        states[start:end] = 1

    ## Set S2 as state 3 depending on position of end T-wave peak in ECG:
    # The second heart sound occurs at approximately the same time as the
    # end-T-wave (A. G. Tilkian and M. B. Conover, Understanding heart sounds
    # and murmurs: with an introduction to lung sounds, 4th ed. Saunders, 2001.)
    # Therefore, for each end-T-wave, find the peak in the envelope around the
    # end-T-wave, setting a window centered on this peak as the second heart
    # sound state:
    # vals = []
    for i in range(0,len(s2_positions)):
        #find search window of envelope:
        #T-end +- mean+1sd
        #Set upper and lower bounds, to avoid errors of searching outside size
        #of the signal
        lower_bound = int(max([s2_positions[i] - np.floor(mean_S2 + std_S2),0]))
        upper_bound = int(min(len(states), np.ceil(s2_positions[i] + np.floor(mean_S2 + std_S2)))) + 1
        search_window = np.multiply(envelope[lower_bound:upper_bound],np.int16(states[lower_bound:upper_bound]!=1))
        # print "sw", search_window
        # break
        
        # Find the maximum value of the envelope in the search window:
        # S2_index = np.argmax(search_window) #xxx might be a bug in original code, where S2_index is always 1, because search_window is [11x11] not [11x1]
        S2_index = 1
        
        #Find the actual index in the envelope of the maximum peak:
        #Make sure this has a max value of the length of the signal:
        S2_index = min(len(states),lower_bound + S2_index-1) 

        #Set the states to state 3, centered on the S2 peak, +- 1/2 of the
        #expected S2 sound duration. Again, making sure it does not try to set a
        #value outside of the length of the signal:
        upper_bound = min(len(states), np.ceil(S2_index +((mean_S2)/2))) + 1
        lower_bound = max([np.ceil(S2_index - ((mean_S2)/2)),1])
        states[lower_bound:upper_bound] = 3
        
        # Set the spaces between state 3 and the next R peak as state 4:
        if(i<=len(s2_positions)):
            #We need to find the next R peak after this S2 sound
            #So, subtract the position of this S2 from the S1 positions
            diffs = (s1_positions - s2_positions[i])
            #Exclude those that are negative (meaning before this S2 occured)
            #by setting them to infinity. They are then excluded when finding
            #the minumum later
            inf = (max(abs(diffs))+1)*99999
            diffs[diffs<0] = inf
            
            #If the array is empty, then no S1s after this S2, so set to end of
            #signal:
            # if(sum(diffs<inf) == 0): #xxx bug here: not called at end of state
            #     end_pos = len(states)
            #     print "yo", i
            # else:
                #else, send the end position to the minimum diff -1
            index = np.argmin(diffs)
            start_pos = np.ceil(S2_index +((mean_S2 +(0*std_S2))/2))
            end_pos = s1_positions[index]
           
            # vals.append(start_pos)#np.ceil(S2_index +((mean_S2 +(0*std_S2))/2)))
            states[start_pos:end_pos] = 4
    # print "sum of states", sum(states)
    # print len(vals), "vals", vals

    ## Setting the first and last sections of the signal
    # As all states are derived from either R-peak or end-T-wave locations, the first affirmed state
    # in the signal will always be state 1 or state 3. Therefore, until this state, the
    # first state should always be set to 4 or 2:

    #Find the first step up:
    first_location_of_definite_state = np.nonzero(states)[0][0]-1
    if(first_location_of_definite_state > 1):
        
        if(states[first_location_of_definite_state + 1] == 1):
            states[0:first_location_of_definite_state + 1] = 4
        
        if(states[first_location_of_definite_state + 1] == 3):
            states[0:first_location_of_definite_state + 1] = 2


    # Find the last step down:
    last_location_of_definite_state = np.nonzero(states != 0)[0][-1]

    if(last_location_of_definite_state > 1):
        
        if(states[last_location_of_definite_state] == 1):
            states[last_location_of_definite_state:] = 2
        
        if(states[last_location_of_definite_state] == 3):
            states[last_location_of_definite_state:] = 4

    states[len(envelope)+1:] = []


    #Set everywhere else as state 2:
    states[states == 0] = 2

    # ## Plotting figures
    # # if(figures)
    # #     figure('Name','Envelope and labelled states')
    # #     plot(envelope)
    # #     hold on
    # #     plot(states,'r')
    # #     legend('Envelope', 'States')
    # #     pause()

    return states


if __name__ == '__main__':
    envelope = np.array([-1.181580e+00,-7.383814e-01,-8.278912e-01,-7.862026e-01,-7.889448e-01,-7.470497e-01,-6.533941e-01,-6.199649e-01,-4.115075e-01,2.568200e-01,3.503906e-01,7.099765e-01,7.713145e-01,2.387513e-01,-4.364732e-01,-5.917915e-01,-4.607982e-01,-5.929685e-01,-8.009246e-01,-8.790875e-01,-6.744337e-01,-3.412089e-01,-1.139669e-01,1.646886e-01,1.166885e+00,1.621809e+00,5.833567e-01,-8.647903e-02,-3.164641e-01,-4.120656e-01,-6.562704e-01,-7.792436e-01,-5.411548e-01,-4.404535e-01,-1.622707e-01,1.149981e-02,-2.454379e-01,-5.582581e-01,-6.544104e-01,-5.010001e-01,-3.294655e-01,2.521278e-01,2.344369e-01,-2.686668e-01,-4.004028e-01,-3.236317e-01,-3.862425e-01,-6.178495e-01,-6.925218e-01,-5.276531e-01,-1.057538e-01,6.716061e-01,9.202059e-01,7.050387e-01,7.015883e-01,1.270350e-01,-1.354677e-01,4.366234e-02,-2.857247e-01,-6.532753e-01,-6.100685e-01,-6.734324e-01,-6.944000e-01,-6.547037e-01,-6.000345e-01,-6.577660e-01,-3.006520e-01,8.804417e-01,1.065122e+00,1.709645e-01,-5.897052e-01,-7.405779e-01,-8.259130e-01,-8.756502e-01,-6.938383e-01,-6.488788e-01,-8.259188e-01,-7.543066e-01,-6.755661e-01,-8.514581e-01,-9.966335e-01,-1.033524e+00,-8.608594e-01,-7.521123e-01,-6.833505e-01,-4.386587e-01,-5.668212e-01,-5.592148e-01,-2.752685e-01,-2.644995e-01,-5.970918e-01,-5.872990e-01,-4.715076e-01,3.319187e-01,1.611882e+00,1.937800e+00,2.213289e+00,1.508145e+00,3.094263e-01,-4.457870e-01,-7.437244e-01,-7.183534e-01,-6.625040e-01,-3.817953e-01,-5.778949e-01,-8.519074e-01,-6.636436e-01,-4.607562e-01,-1.489951e-01,1.318332e+00,2.129115e+00,1.188986e+00,2.105038e-01,-3.684143e-01,-6.403512e-01,-8.409651e-01,-7.334977e-01,-7.062785e-01,-8.227198e-01,-3.932369e-01,-1.079633e-01,-5.125414e-01,-8.685190e-01,-7.732644e-01,-5.429894e-01,-6.269658e-01,-6.752726e-01,-6.460733e-01,-2.397640e-01,-3.805508e-01,-7.088152e-01,-6.277095e-01,-7.438974e-01,-8.890904e-01,-7.271082e-01,-4.476305e-02,1.731805e+00,1.938382e+00,2.185131e+00,2.564838e+00,1.519222e+00,9.365837e-01,3.652519e-01,1.377850e-01,-2.778038e-01,-4.614655e-01,-2.728822e-01,1.641025e-01,3.728746e-01,-2.199459e-01,-2.426924e-02,1.326160e+00,2.282193e+00,1.349932e+00,1.359112e-01,-2.955743e-01,-3.599824e-01,-4.623868e-01,-5.566949e-01,-7.079169e-01,-7.295946e-01,-6.340137e-01,-4.606421e-01,-4.936899e-01,-5.537026e-01,-5.532663e-01,-3.351320e-01,-1.056109e-02,-9.384522e-03,-2.496373e-01,-5.846470e-01,-9.022716e-01,-9.031297e-01,-5.820119e-01,-3.647195e-01,-3.134152e-01,-3.758822e-01,-4.447913e-01,-4.849953e-02,1.131585e+00,1.794130e+00,2.390514e+00,2.044337e+00,7.624365e-01,-3.684393e-02,-4.902446e-01,-6.776299e-02,-2.247434e-01,-4.374814e-01,-3.431637e-01,-4.413849e-01,-4.283565e-01,-3.888699e-01,-7.999050e-02,1.065296e+00,2.706961e+00,1.932176e+00,9.001344e-01,-4.873015e-01,-9.826930e-01,-8.837741e-01,-9.019134e-01,-8.745962e-01,-7.994180e-01,-7.415936e-01,-5.564042e-01,-4.884848e-01,-6.588445e-01,-5.369198e-01,-4.840204e-01,-5.350731e-01,-3.639274e-01,-4.003275e-01,-6.207507e-01,-7.648464e-01,-7.527132e-01,-5.643033e-01,-2.976565e-01,-2.389375e-01,-2.141810e-01,4.480991e-02,-1.853355e-02,5.288057e-01,1.299993e+00,1.917614e+00,2.350210e+00,1.224254e+00,3.798045e-01,-6.166517e-02,-4.805155e-01,-6.079179e-01,-5.984498e-01,-2.215641e-01,-1.628859e-02,-7.603026e-02,-9.409075e-02,-3.138431e-01,-2.840310e-01,1.138301e+00,1.350633e+00,2.974985e-01,-1.215447e-01,-3.816808e-01,-3.544228e-01,-5.462964e-01,-6.604709e-01,-6.251085e-01,-6.055772e-01,-5.007133e-01,-4.482565e-01,-3.845112e-01,-1.836316e-01,-3.199703e-01,-4.933772e-01,-6.135298e-01,-7.231026e-01,-7.810312e-01,-6.960068e-01,-7.004377e-01,-5.940398e-01,-4.274489e-01,-3.391602e-01,-3.223590e-01,-2.437523e-01,8.796684e-03,6.194638e-01,7.001813e-01,6.534465e-01,8.992356e-01,2.787578e-01,-4.114272e-01,-7.324244e-01,-8.282146e-01,-7.401817e-01,-9.350327e-01,-2.362837e-01,6.257630e-01,8.771230e-01,1.075215e+00,1.138365e+00,1.563429e+00,2.316262e+00,2.520729e+00,7.805354e-01,-1.649991e-01,-7.740245e-01,-9.114092e-01,-8.487226e-01,-8.532527e-01,-9.401713e-01,-9.355906e-01,-9.742947e-01,-8.614103e-01,-6.219139e-01,-5.435493e-01,-4.229336e-01,-4.032758e-01,-6.208996e-01,-5.814358e-01,-4.131322e-01,-2.773817e-01,-5.433321e-01,-8.246936e-01,-9.075390e-01,-5.925279e-01,-6.510382e-02,1.701051e+00,1.770040e+00,1.653923e+00,1.678758e+00,1.274164e+00,1.349362e+00,5.951915e-01,2.265591e-01,-1.031976e-01,-4.640617e-01,-7.274180e-01,-2.379520e-01,3.650189e-01,2.718878e-01,-1.185431e-01,-5.342639e-01,-6.318474e-01,-3.275376e-01,9.610696e-01,1.440724e+00,3.776349e-01,-3.971414e-01,-6.582453e-01,-4.695641e-01,-4.858503e-01,-7.140650e-01,-9.702592e-01,-9.323505e-01,-9.758430e-01,-1.054130e+00,-9.424993e-01,-5.388783e-01,3.230962e-01,2.479772e-01,1.642157e-01,4.254915e-01,5.567755e-01,8.205942e-01,6.694877e-02,-4.842243e-01,-6.853425e-01,-8.978179e-01,-8.218908e-01,-7.638392e-01,-3.878120e-01,7.898812e-01,1.623537e+00,1.355011e+00,1.314726e+00,1.989411e-01,-4.838257e-01,-6.877057e-01,-5.738663e-01,-2.894817e-01,-5.031568e-01,-6.668535e-01,-6.445301e-01,-7.116841e-01,-7.916471e-01,-6.545486e-01,-3.636621e-01,1.144087e+00,2.064424e+00,7.350679e-01,-8.902122e-02,-1.877204e-01,-5.525985e-01,-5.090228e-01,-6.286100e-01,-6.748279e-01,-5.940899e-01,-6.948679e-01,-5.073748e-01,-2.503304e-01,-3.228455e-01,-2.524766e-01,-5.601751e-01,-7.806240e-01,-7.563658e-01,-5.188313e-01,-3.175163e-01,-1.800755e-01,-2.134306e-01,-3.859874e-01,-3.754489e-01,-5.290296e-01,-4.183360e-01,-8.020425e-02,5.280045e-01,1.109594e+00,7.493747e-01,9.111937e-01,7.016561e-01,3.229040e-01,5.938465e-02,-1.995368e-01,-9.735740e-02,-2.019301e-01,-2.222532e-01,-4.966444e-01,-5.052277e-01,4.677152e-01,1.923025e+00,1.974214e+00,2.576563e+00,3.023825e+00,9.902505e-01,-3.087172e-02,-5.463624e-01,-6.618241e-01,-6.609062e-01,-6.885819e-01,-6.659542e-01,-7.105537e-01,-5.519072e-01,-4.678677e-01,-4.398211e-01,4.972232e-02,-2.485073e-01,-8.456816e-01,-8.286658e-01,-9.152514e-01,-9.667970e-01,-6.568396e-01,-6.943172e-02,-9.146508e-02,-2.763453e-01,-2.966482e-01,-4.048927e-01,-3.453123e-01,-1.054608e-03,8.044761e-01,1.425611e+00,1.547399e+00,2.412541e+00,1.779676e+00,6.270573e-01,-2.309850e-01,-5.015627e-01,-5.964910e-01,-3.926293e-01,-1.662326e-01,-5.571741e-01,-7.854419e-01,-7.428294e-01,-6.125549e-01,-4.770956e-01,8.434047e-01,1.644127e+00,7.442851e-01,2.377760e-01,1.721651e-01,-1.298825e-01,-4.448447e-01,-3.294393e-01,-4.472013e-01,-5.261034e-01,-3.243723e-01,-1.351574e-01,4.485608e-02,-9.680122e-02,-8.087089e-02,-9.723731e-02,-4.735776e-01,-3.973477e-01,-4.436269e-01,-4.747782e-01,-3.976659e-01,-2.902622e-01,3.739591e-02,-5.150608e-02,-1.449833e-01,1.607681e-01,2.579831e-01,7.836453e-01,8.940489e-01,6.073252e-01,1.166635e+00,7.774249e-01,5.527826e-02,-1.773384e-01,2.708213e-01,5.004629e-01,3.241821e-01,8.456335e-02,6.509713e-01,7.220255e-01,9.548782e-02,2.113163e+00,3.339061e+00,2.971750e+00,2.221059e+00,6.045100e-01,-1.544088e-01,-7.818059e-01,-8.790712e-01,-9.194449e-01,-9.519747e-01,-9.729652e-01,-5.705381e-01,-4.906650e-01,-5.108889e-01,-5.695355e-01,-6.375232e-02,2.280649e-01,-3.206258e-01,-5.809664e-01,-7.350795e-01,-7.427337e-01,-7.816859e-01,-8.042623e-01,-8.126481e-01,-8.880507e-01,-8.213576e-01,-4.898726e-01,-1.495500e-01,2.805698e-01,7.483614e-01,1.339631e+00,1.745464e+00,2.945095e+00,2.872346e+00,1.114328e+00,6.885299e-01,3.800342e-01,6.099720e-01,9.645574e-02,-5.162773e-01,-6.174757e-01,-7.135988e-01,-6.513717e-01,-4.434442e-01,-3.161183e-01,7.180509e-01,1.694580e+00,6.135547e-01,3.913024e-02,-1.748057e-01,-4.415323e-01,-6.236301e-01,-8.250074e-01,-9.043416e-01,-9.824829e-01,-7.860024e-01,-7.083411e-01,-6.467564e-01,-7.142382e-01,-9.439883e-01,-1.100778e+00,-1.089886e+00,-1.026025e+00,-9.543617e-01,-8.336337e-01,-8.373297e-01,-9.325314e-01,-6.690820e-01,-5.482041e-01,-5.796918e-01,-3.809908e-01,-9.982817e-02,-1.172754e-02,7.045003e-01,1.390952e+00,1.785156e+00,3.020104e+00,1.777268e+00,3.573345e-01,-1.687969e-01,-7.183194e-01,-6.977404e-01,-8.386111e-01,-8.620802e-01,-8.533984e-01,-8.505725e-01,-9.592449e-01,-5.918714e-01,-4.005974e-02,1.698215e+00,2.507269e+00,1.093734e+00,2.489774e-01,-3.747390e-01,-3.436738e-01,-2.493831e-01,-5.857280e-01,-7.028855e-01,-6.476492e-01,-6.622233e-01,-5.219817e-01,-4.200562e-01,-5.051018e-01,-2.169417e-01,-1.555743e-01,-3.669846e-01,-6.298571e-02,-1.942200e-01,-3.319608e-01,-2.662442e-01,-2.056986e-01,-2.680003e-01,-1.337541e-01,7.047698e-02,2.215723e-01,-4.619308e-02,-1.279377e-01,1.045136e+00,1.148630e+00,1.169589e+00,1.726897e+00,8.249054e-01,1.551551e-02,-5.696584e-01,-6.792279e-01,-8.586755e-01,-8.100352e-01,-8.170392e-01,-9.560680e-01,-1.034420e+00,-8.801935e-01,-7.397707e-01,7.422352e-02,1.929382e+00,1.555389e+00,7.998156e-01,2.093597e-01,-1.928184e-01,-1.533183e-01,-1.502483e-01,4.405268e-01,7.516417e-01,7.530093e-01,1.249800e+00,2.722964e-01,-3.245219e-01,-8.644221e-02,-1.676357e-02,-1.796372e-01,-1.185626e-01,5.354790e-02,9.992373e-02,2.565336e-02,-1.943481e-01,-2.387349e-01,-2.166410e-01,-1.644803e-01,-9.261833e-02,6.968477e-01,9.343412e-01,1.008565e+00,1.242027e+00,1.630085e+00,2.750245e+00,2.121144e+00,1.180059e+00,3.995258e-01,2.484423e-01,4.119807e-01,2.334027e-01,6.763758e-01,6.094264e-01,1.118446e-01,-2.225593e-01,-1.735197e-01,2.811379e-01,1.681510e+00,2.201820e+00,1.301041e+00,2.162263e+00,3.193760e+00,1.020674e+00,-1.760974e-03,-4.415809e-01,-6.265847e-01,-5.162197e-01,-3.726703e-01,-4.936390e-01,-6.226191e-01,-4.583474e-01,-6.698493e-01,-8.952222e-01,-8.001153e-01,-5.142311e-01,-3.808166e-01,-4.693848e-01,-6.252627e-01,-6.492677e-01,-6.609227e-01,-7.537746e-01,-7.887394e-01,-7.903902e-01,-9.938131e-02,8.017568e-01,8.783685e-01,1.525368e+00,1.092039e+00,2.291899e-01,-1.823800e-01,-1.555779e-01,-4.509127e-01,-7.010879e-01,-9.076917e-01,-9.933082e-01,-8.234357e-01,-8.482657e-01,-3.251304e-02,1.102504e+00,1.633685e+00,2.438974e+00,1.484963e+00,7.361304e-01,1.233813e-01,2.073223e-01,2.457464e-01,-2.858494e-02,-2.962701e-01,-5.878835e-01,-5.646340e-01,-5.347846e-01,-4.756613e-01,-6.417817e-01,-8.470255e-01,-7.761019e-01,-8.236774e-01,-7.789133e-01,-7.793931e-01,-9.630268e-01,-9.488891e-01,-8.226439e-01,-6.706145e-01,-8.319036e-01,-8.651112e-01,-6.342829e-01,9.668697e-02,1.665316e+00,2.307855e+00,2.861530e+00,2.432259e+00,8.366618e-01,1.407776e-01,-5.658236e-01,-7.633197e-01,-5.902653e-01,-4.181411e-01,-5.417998e-01,-6.218246e-01,-7.578857e-01,-6.400673e-01,-2.734952e-01,4.311987e-01,2.289827e+00,1.887725e+00,4.018269e-01,-1.645101e-01,-3.261594e-01,-3.127887e-01,3.815332e-01,6.817273e-01,-2.137349e-01,-5.574003e-01,-4.477838e-01,-5.022700e-01,-5.084893e-01,-5.775666e-01,-8.845031e-01,-8.025824e-01,-8.631910e-01,-1.100737e+00,-1.021630e+00,-8.326876e-01,-6.735251e-01,-6.097347e-01,-4.716668e-01,7.909247e-02,1.019464e+00,1.131955e+00,2.206273e+00,2.532671e+00,2.347339e+00,2.392156e+00,6.778853e-01,-2.993652e-02,-2.130342e-01,-4.026594e-01,2.438538e-01,4.245814e-01,-2.814754e-01,-6.529645e-01,-7.966407e-01,-8.629196e-01,-6.116957e-01,-2.060562e-01,1.713157e+00,2.239705e+00,6.567917e-01,-9.276343e-02,-4.594382e-01,-6.139981e-01,-6.866792e-01,-5.371290e-01,-5.531524e-01,-8.842749e-01,-9.578816e-01,-9.261597e-01,-9.050345e-01,-9.119444e-01,-9.031457e-01,-1.004001e+00,-1.018840e+00,-9.645657e-01,-1.106618e+00,-1.203739e+00,-9.770098e-01,-9.027942e-01,-7.930152e-01,-8.100213e-01,-7.425481e-01,-4.405578e-01,8.491405e-01,1.604266e+00,1.662346e+00,2.394554e+00,1.337327e+00,4.009634e-01,-2.385494e-01,-6.912937e-01,-6.693149e-01,-5.241212e-01,-7.129006e-01,-8.358359e-01,-7.759895e-01,-6.543222e-01,-3.882277e-01,2.642019e-01,2.337487e+00,2.690956e+00,6.481261e-01,-3.073788e-01,-5.504633e-01,-4.437519e-01,-2.588736e-01,1.544732e-01,7.876775e-01,1.187662e+00,2.632574e+00,2.049219e+00,8.706761e-01,1.416550e+00,1.751700e+00,9.229324e-01,1.288879e+00,3.487407e+00,2.824532e+00,1.981740e+00,1.116867e+00,1.602258e-01,-1.840482e-02,-4.501461e-01,-4.390903e-01,-2.874429e-01,8.448233e-01,1.491896e+00,1.695674e+00,3.410340e+00,4.261399e+00,6.367724e+00,5.625651e+00,2.940197e+00,1.066339e+00,-2.429162e-01,-4.734654e-01,-3.152953e-01,-2.376172e-01,-3.163123e-01,4.266620e-02,1.352732e+00,2.806861e+00,2.081993e+00,7.769515e-01,9.330404e-02,1.229902e-01,2.170131e-01,1.289363e-01,7.879676e-02,-2.384706e-01,-4.999646e-01,-6.616011e-01,-6.262662e-01,-8.163566e-01,-9.994487e-01,-8.933350e-01,-7.417037e-01,-4.103825e-01,-2.731760e-01,-4.243956e-01,-5.688171e-01,-7.635205e-01,-8.801441e-01,-8.762330e-01,-9.158915e-01,-8.665102e-01,-3.092081e-01,7.524643e-01,8.765211e-01,7.268903e-01,1.119326e-01,-2.964896e-01,-5.111741e-01,-4.969718e-01,-3.753733e-01,-3.683666e-01,-2.879981e-01,-3.922276e-01,-4.331437e-01,-5.250197e-01,-5.975431e-01,-3.459383e-01,7.474241e-01,2.072136e+00,1.242482e+00,-2.393135e-01,-7.012029e-01,-6.795193e-01,-7.903528e-01,-8.884009e-01,-8.368431e-01,-8.740281e-01,-9.960401e-01,-8.634372e-01,-7.295434e-01,-7.874867e-01,-9.464693e-01,-8.739018e-01,-7.601967e-01,-6.048136e-01,5.548610e-02,3.942195e-01,-2.437411e-01,-4.737165e-01,-6.262526e-01,-8.835322e-01,-7.999817e-01,-5.235012e-01,4.331351e-01,1.553418e+00,1.587132e+00,1.852653e+00,1.119141e+00,-8.686270e-02,-4.182874e-02,3.134219e-01,-3.686614e-01,-7.816870e-01,-9.043615e-01,-9.980606e-01,-8.951502e-01,-8.489739e-01,-7.358496e-01,-3.749991e-01,1.444178e+00,2.411965e+00,8.439361e-01,-3.818959e-01,-7.742978e-01,-6.975919e-01,-8.325966e-01,-8.015148e-01,-9.395254e-01,-9.989337e-01,-8.464228e-01,-8.667974e-01,-9.705196e-01,-9.400733e-01,-8.439627e-01,-5.458944e-01,-5.331294e-01,-5.342225e-01,-7.781981e-01,-1.008618e+00,-1.050035e+00,-1.014240e+00,-9.370470e-01,-8.503194e-01,-6.436886e-01,-3.887099e-01,8.834658e-01,1.593146e+00,2.339310e+00,2.855452e+00,1.412769e+00,1.783344e-01,-6.884670e-01,-9.274944e-01,-9.771105e-01,-8.094589e-01,-6.327982e-01,-6.349346e-02,-3.022288e-01,-6.372776e-01,-2.076467e-01,8.965300e-01,3.671855e+00,3.605659e+00,1.585936e+00,7.345653e-01,4.534567e-01,5.222505e-01,8.666370e-02,-4.905390e-01,-7.333142e-01,-6.005593e-01,-6.264014e-01,-6.561873e-01,-7.288296e-01,-7.158295e-01,-5.936702e-01,-7.363386e-01,-8.763698e-01,-8.135672e-01,-5.988606e-01,-6.264824e-01,-8.758450e-01,-8.261400e-01,-6.201903e-01,-6.272949e-01,-3.317686e-01,7.411598e-01,2.471264e+00,2.504673e+00,3.183125e+00,2.645368e+00,1.071076e+00,5.328492e-01,-2.923852e-01,-1.249254e-01,1.413807e-02,1.077609e-01,3.269103e-01,1.055675e+00,2.077664e+00,2.537178e+00,1.716740e+00,2.805978e+00,3.920837e+00,1.849962e+00,3.777274e-01,-4.656263e-01,-6.235232e-01,-7.293815e-01,-7.292624e-01,-5.039927e-01,-4.901534e-01,-5.256395e-01,-5.083729e-01,-3.070237e-01,-8.259836e-03,-5.556872e-02,-7.693312e-02,-1.470624e-01,-3.693724e-01,-5.273547e-01,-5.760143e-01,-5.533033e-01,-5.187474e-01,-5.493471e-01,-4.568852e-01,-3.010682e-01,-3.612996e-02,3.404810e-01,5.737484e-01,3.902687e-01,1.270098e+00,1.345972e+00,3.443538e-01,-4.414057e-01,-6.007663e-01,-4.729254e-01,-4.187905e-01,-2.173174e-01,-1.362856e-01,-2.307653e-01,-3.314032e-01,-1.453456e-01,3.893222e-02,1.433201e+00,2.371870e+00,1.608192e+00,9.494551e-01,6.813171e-02,-2.732044e-01,-4.067623e-01,-2.659278e-01,-2.844022e-01,-4.664832e-01,-6.857027e-01,-8.426422e-01,-5.960865e-01,-6.129319e-01,-8.238068e-01,-8.001464e-01,-6.737195e-01,-4.888054e-01,-3.814304e-01,-3.884555e-01,-4.954829e-01,-5.534070e-01,-7.276528e-01,-6.580592e-01,-7.357445e-01,-5.200408e-01,8.719054e-01,1.429145e+00,1.680545e+00,1.546891e+00,5.343397e-01,-2.218557e-01,-7.490947e-01,-6.445472e-01,-7.518396e-01,-6.187452e-01,-5.120493e-01,-6.829517e-01,-7.830348e-01,-8.078831e-01,-3.958117e-01,1.821676e-02,1.749475e+00,2.416483e+00,9.928332e-01,-1.174885e-02,-4.890348e-01,-5.899404e-01,-6.494258e-01,-7.109723e-01,-7.025278e-01,-6.404835e-01,-5.727815e-01,-6.555533e-01,-7.212884e-01,-6.931721e-01,-8.057500e-01,-9.594684e-01,-9.968034e-01,-1.035215e+00,-9.663732e-01,-9.973652e-01,-7.810636e-01,-5.970951e-01,-1.299027e-01,1.205852e+00,1.237008e+00,4.672739e-01,1.227978e+00,2.446783e+00,2.426003e+00,3.115824e+00,1.831602e+00,4.114918e-01,1.092051e-01,-3.034081e-01,-6.594864e-01,-8.268374e-01,-7.680772e-01,-9.233483e-01,-1.074552e+00,-9.519921e-01,-6.131150e-01,-1.802044e-01,1.585171e+00,3.151581e+00,1.481826e+00,5.814659e-01,4.990077e-01,-1.677595e-01,-6.522859e-01,-8.456149e-01,-8.556786e-01,-8.550042e-01,-7.846069e-01,-7.440653e-01,-6.593969e-01,-5.645578e-01,-7.168906e-01,-7.543231e-01,-6.604754e-01,-7.827705e-01,-8.216763e-01,-8.399036e-01,-8.324100e-01,-7.933418e-01,-9.403305e-01,-7.587065e-01,-8.113039e-01,-6.783025e-01,-1.085174e-01,1.585778e+00,2.257344e+00,2.849247e+00,2.733125e+00,1.184451e+00,3.844657e-01,-4.649533e-01,-8.158443e-01,-7.236960e-01,-5.756259e-01,-5.279264e-01,-2.790405e-01,4.370949e-02,7.572560e-01,5.169926e-01,1.064699e+00,3.462092e+00,3.007240e+00,1.003973e+00,-9.892755e-02,-2.531434e-01,-1.605862e-01,-1.915846e-01,-3.897442e-01,-5.834590e-01,-5.865884e-01,-6.500035e-01,-7.387129e-01,-8.193797e-01,-8.107943e-01,-6.714792e-01,-5.617428e-01,-5.328844e-01,-6.458013e-01,-4.495690e-01,-2.722552e-01,-1.257338e-01,-2.418668e-01,-5.145347e-01,-4.816981e-01,-4.231726e-01,-3.377250e-02,7.947637e-01,1.597733e+00,1.349061e+00,2.082245e+00,1.759275e+00,5.318750e-01,2.310252e-01,2.555121e-01,4.511168e-01,5.082041e-01,-1.979195e-01,-3.656669e-01,-3.559486e-01,-4.241561e-01,-4.545542e-01,-3.371453e-01,1.094053e+00,2.403021e+00,1.267946e+00,4.342486e-01,2.293864e-02,-2.336833e-01,-4.407151e-01,-5.419673e-01,-6.421396e-01,-6.515363e-01,-6.045675e-01,-4.152607e-01,-3.855973e-01,-4.530333e-01,-6.308901e-01,-8.095595e-01,-9.481909e-01,-8.630350e-01,-6.250677e-01,-4.456153e-01,-6.001499e-01,-6.522094e-01,-4.894099e-01,-1.935944e-01,-3.908988e-01,-3.660589e-01,3.094200e-01,1.097563e+00,1.078235e+00,1.151420e+00,8.486416e-01,-1.578977e-01,-4.451259e-01,-5.497619e-01,-5.997630e-01,-5.308821e-01,-7.157967e-01,-7.173243e-01,-6.050679e-01,-6.308240e-01,-4.791848e-01,-2.934798e-01,3.984020e-01,1.669054e+00,9.594241e-01,4.769901e-02,-5.254609e-01,-8.879733e-01,-9.212204e-01,-8.555320e-01,-8.565215e-01,-9.635302e-01,-9.137146e-01,-8.576268e-01,-8.316210e-01,-7.558362e-01,-6.717941e-01,-9.200630e-01,-9.574167e-01,-8.390638e-01,-8.562402e-01,-1.011450e+00,-1.004817e+00,-1.003904e+00,-7.909807e-01,-6.191083e-01,-5.671676e-01,-2.796509e-01,4.515268e-01,1.804184e+00,2.119784e+00,2.827025e+00,2.730982e+00,9.451746e-01,-2.248868e-02,-5.405481e-01,-5.421570e-01,-7.393763e-01,-9.194496e-01,-8.462330e-01,-7.396516e-01,-1.021063e+00,-8.994087e-01,-6.909779e-01,6.342489e-01,2.966992e+00,2.382928e+00,9.034515e-01,1.838720e-01,-1.770330e-01,-2.672143e-01,-7.265268e-02,-7.153609e-03,-2.250103e-01,-3.105188e-01,-4.481831e-01,-6.031381e-01,-6.818462e-01,-7.609127e-01,-6.936486e-01,-6.458383e-01,-3.803747e-01,-4.020996e-01,-6.019181e-01,-7.888073e-01,-1.084807e+00,-1.048719e+00,-9.359452e-01,-8.041663e-01,-5.682123e-01,3.368943e-01,2.157119e+00,2.452552e+00,2.926066e+00,2.497952e+00,9.266389e-01,3.917472e-01,-2.407952e-01,-6.741956e-01,-5.129884e-01,-5.841894e-01,-8.521317e-01,-8.019100e-01,-9.046828e-01,-7.608264e-01,-4.162116e-01,1.114104e+00,3.223446e+00,2.280805e+00,5.359562e-01,-4.118199e-01,-8.102023e-01,-9.759518e-01,-9.933426e-01,-8.084126e-01,-7.404223e-01,-7.746466e-01,-8.132507e-01,-9.135022e-01,-9.187512e-01,-7.920730e-01,-6.957052e-01,-7.484922e-01,-7.769715e-01,-8.130677e-01,-7.976083e-01,-6.887085e-01,-5.775911e-01,-5.688120e-01,-4.100204e-01,-2.884515e-01,1.984358e-02,1.083818e+00,1.706777e+00,1.784158e+00,2.046503e+00,9.387346e-01,4.402084e-01,2.920004e-01,-7.438281e-02,-1.051939e-01,-2.333418e-01,-2.797382e-01,-3.798571e-01,-5.043177e-01,-6.622705e-01,-4.324062e-01,-1.553450e-01,1.527001e+00,2.117467e+00,4.937280e-01,-2.514364e-01,-6.192727e-01,-5.101936e-01,-4.628470e-01,-4.558033e-01,-4.554676e-01,-4.251334e-01,-4.860815e-01,-5.364316e-01,-4.755290e-01,-3.317805e-01,-3.792903e-01,-5.567153e-01,-4.543083e-01,-4.891118e-01,-3.553926e-01,-3.545674e-01,-4.576135e-01,-2.635971e-01,-1.012564e-01,-5.079963e-02,-7.494583e-02,4.903802e-01,9.665652e-01,7.206836e-01,1.380067e+00,1.174083e+00,6.139080e-01,-9.597330e-02,-7.284867e-01,-9.841966e-01,-1.042792e+00,-8.846342e-01,-8.702154e-01,-9.370558e-01,-7.534757e-01,-3.915503e-01,1.416363e+00,2.894836e+00,2.607459e+00,1.484211e+00,5.217055e-01,-3.141439e-01,-7.432016e-01,-7.737660e-01,-7.673864e-01])
    s1_positions = np.array([7,50,92,135,178,221,264,307,350,393,436,479,522,566,610,653,695,737,780,822,864,905,947,989,1030,1072,1114,1156,1199,1241,1283,1325,1367,1409,1450])-1 #account for matlab indexing in example_data.m
    s2_positions = np.array([24,67,110,151,196,238,281,326,369,414,454,495,540,584,628,670,712,754,798,845,881,923,964,1006,1048,1090,1130,1173,1215,1258,1301,1344,1384,1427,1466])-1 #account for matlab indexing in example_data.m
    samplingFrequency = 50
    res = labelPCGStates(envelope, s1_positions, s2_positions, samplingFrequency)
    actual = np.array([4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4])
    assert(len(res) == len(actual))
    assert(sum(np.subtract(res,actual)) == 0)
    # print res.shape, np.sum(res)
    print "labelPCGStates.py has been tested successfully"

